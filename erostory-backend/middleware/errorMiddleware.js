// --- START OF FILE middleware/errorMiddleware.js ---
const AppError = require('../utils/AppError');
require('colors'); // –î–æ–¥–∞—î–º–æ –¥–ª—è –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ –≤–∏–≤–æ–¥—É

// --- –û–±—Ä–æ–±–Ω–∏–∫–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ ---

const handleCastErrorDB = err => {
    const message = `–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ–ª—è ${err.path}: ${err.value}.`;
    return new AppError(message, 400); // Bad Request
};

const handleDuplicateFieldsDB = err => {
    // –í–∏—Ç—è–≥—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É (–º–æ–∂–µ –±—É—Ç–∏ –Ω–µ –∑–∞–≤–∂–¥–∏ –Ω–∞–¥—ñ–π–Ω–∏–º)
    // –ö—Ä–∞—â–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑ err.keyValue, —è–∫—â–æ –≤–æ–Ω–æ –∑–∞–≤–∂–¥–∏ —î
    const value = err.message.match(/(["'])(\\?.)*?\1/)?.[0] || JSON.stringify(err.keyValue);
    const field = Object.keys(err.keyValue || {})[0] || '–ø–æ–ª–µ'; // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –ø–æ–ª—è

    let message = `–î—É–±–ª—é—é—á–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—è ${field}: ${value}. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ñ–Ω—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è.`;

    // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –ø–æ–º–∏–ª–∫–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
    if (err.keyValue?.refModel && err.keyValue?.lang) {
        message = `–ü–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è —Å—É—Ç–Ω–æ—Å—Ç—ñ (${err.keyValue.refModel}) —Ç–∞ –º–æ–≤–∏ ('${err.keyValue.lang}') –≤–∂–µ —ñ—Å–Ω—É—î.`;
    }

    return new AppError(message, 409); // 409 Conflict
};

const handleValidationErrorDB = err => {
    const errors = Object.values(err.errors).map(el => el.message);
    const message = `–ù–µ–≤—ñ—Ä–Ω—ñ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ. ${errors.join('. ')}`;
    return new AppError(message, 400); // Bad Request
};

// –ü–æ–º–∏–ª–∫–∏ JWT
const handleJWTError = () => new AppError('–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω. –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É!', 401);
const handleJWTExpiredError = () => new AppError('–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó —Å–µ—Å—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É!', 401);

// –ü–æ–º–∏–ª–∫–∏ Multer (–æ–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞–Ω–∞ —Ç—É—Ç)
const handleMulterError = err => {
    let message = `–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: ${err.message}`;
    if (err.code === 'LIMIT_FILE_SIZE') {
        message = `–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π.`; // –î–µ—Ç–∞–ª—ñ –ø—Ä–æ –ª—ñ–º—ñ—Ç –∫—Ä–∞—â–µ –¥–æ–¥–∞—Ç–∏ –≤ uploadMiddleware
    } else if (err.code === 'LIMIT_UNEXPECTED_FILE') {
        message = `–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–µ –ø–æ–ª–µ —Ñ–∞–π–ª—É: ${err.field}.`;
    } else if (err.code === 'LIMIT_FILE_COUNT') {
        message = '–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Ñ–∞–π–ª—ñ–≤.';
    }
    return new AppError(message, 400); // Bad Request
};


// --- –§—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É ---

const sendErrorDev = (err, req, res) => {
    console.error('–ü–û–ú–ò–õ–ö–ê üí• (Development):'.red, err);

    // API –ø–æ–º–∏–ª–∫–∞
    if (req.originalUrl.startsWith('/api')) {
        return res.status(err.statusCode).json({
            status: err.status,
            error: err, // –í–∫–ª—é—á–∞—î–º–æ –æ–±'—î–∫—Ç –ø–æ–º–∏–ª–∫–∏
            message: err.message,
            stack: err.stack // –í–∫–ª—é—á–∞—î–º–æ —Å—Ç–µ–∫ –¥–ª—è –¥–µ–±–∞–≥—É
        });
    }
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–æ–º–∏–ª–∫–∏ (—è–∫—â–æ —î) - –ø–æ–∫–∏ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ
    // console.error('–ü–û–ú–ò–õ–ö–ê üí•', err);
    // return res.status(err.statusCode).render('error', {
    //     title: '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!',
    //     msg: err.message
    // });
    // –ê–±–æ –ø—Ä–æ—Å—Ç–æ JSON
    return res.status(err.statusCode).json({
        status: err.status,
        message: `–ü–æ–º–∏–ª–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –∞–±–æ –Ω–µ-API –∑–∞–ø–∏—Ç: ${err.message}`
    });
};

const sendErrorProd = (err, req, res) => {
    // –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É –∑–∞–≤–∂–¥–∏
    console.error('–ü–û–ú–ò–õ–ö–ê üí• (Production):'.red, err.name, err.message, err.stack ? `\nStack: ${err.stack.split('\n')[1]}` : ''); // –õ–æ–≥—É—î–º–æ –º–µ–Ω—à–µ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–∫—É

    // –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è API –∑–∞–ø–∏—Ç—ñ–≤
    if (req.originalUrl.startsWith('/api')) {
        if (err.isOperational) {
            // –û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞, –¥–æ–≤—ñ—Ä–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
            return res.status(err.statusCode).json({
                status: err.status,
                message: err.message
            });
        }
        // –ü—Ä–æ–≥—Ä–∞–º–Ω–∞ –∞–±–æ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ —Ä–æ–∑–∫—Ä–∏–≤–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ
        return res.status(500).json({
            status: 'error',
            message: '–í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' // –ó–∞–≥–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        });
    }

    // –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –Ω–µ-API –∑–∞–ø–∏—Ç—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–æ–º–∏–ª–∫–∏)
    if (err.isOperational) {
        // return res.status(err.statusCode).render('error', {
        //     title: '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!',
        //     msg: err.message
        // });
        return res.status(err.statusCode).json({ // –ü–æ–∫–∏ —â–æ JSON
            status: err.status,
            message: err.message
        });
    }
    // –ü—Ä–æ–≥—Ä–∞–º–Ω–∞ –∞–±–æ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞
    // return res.status(err.statusCode).render('error', {
    //     title: '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!',
    //     msg: '–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.'
    // });
    return res.status(500).json({
        status: 'error',
        message: '–í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.'
    });
};

// --- –ì–æ–ª–æ–≤–Ω–∏–π Middleware –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ ---
module.exports = (err, req, res, next) => {
    err.statusCode = err.statusCode || 500;
    err.status = err.status || 'error';

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
    let error = { ...err, message: err.message, name: err.name };
    // –ö–æ–ø—ñ—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è, —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º–∏ –¥–ª—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    if (err.code) error.code = err.code;
    if (err.path) error.path = err.path;
    if (err.value) error.value = err.value;
    if (err.keyValue) error.keyValue = err.keyValue;
    if (err.errors) error.errors = err.errors; // –î–ª—è ValidationError
    if (err.field) error.field = err.field; // –î–ª—è MulterError

    // --- –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ –¥–ª—è Production ---
    if (process.env.NODE_ENV !== 'development') {
        if (error.name === 'CastError') error = handleCastErrorDB(error);
        if (error.code === 11000 || error.code === 11001) error = handleDuplicateFieldsDB(error);
        if (error.name === 'ValidationError') error = handleValidationErrorDB(error);
        if (error.name === 'JsonWebTokenError') error = handleJWTError();
        if (error.name === 'TokenExpiredError') error = handleJWTExpiredError();
        if (error.name === 'MulterError') error = handleMulterError(error);
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    if (process.env.NODE_ENV === 'development') {
        sendErrorDev(err, req, res); // –í DEV –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –ø–æ–º–∏–ª–∫—É –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —Å—Ç–µ–∫—É
    } else {
        sendErrorProd(error, req, res); // –í PROD –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω—É (error)
    }
};
// --- END OF FILE middleware/errorMiddleware.js ---