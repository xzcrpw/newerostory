// --- START OF FILE controllers/tagController.js ---
const mongoose = require('mongoose');
const crypto = require('crypto'); // –î–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —Å—É—Ñ—ñ–∫—Å–∞ slug
const Tag = require('../models/Tag');
const Translation = require('../models/Translation');
const Story = require('../models/Story'); // –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ–π
const catchAsync = require('../utils/catchAsync');
const AppError = require('../utils/AppError');
const APIFeatures = require('../utils/apiFeatures');
const getLocalizedData = require('../utils/getLocalizedData');
const slugify = require('slugify');
const sendTelegramNotification = require('../utils/telegramNotifier');
require('colors');

const TAG_TRANSLATABLE_FIELDS = ['name'];
const DEFAULT_TAG_PAGINATION_LIMIT = 100; // –õ—ñ–º—ñ—Ç –¥–ª—è —Å–ø–∏—Å–∫—É —Ç–µ–≥—ñ–≤

// --- CREATE TAG (Admin only) ---
exports.createTag = catchAsync(async (req, res, next) => {
    const { translations } = req.body;

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è (–¥–æ–¥–∞—Ç–∫–æ–≤–æ –¥–æ middleware)
    if (!translations?.uk?.name?.trim()) {
        return next(new AppError('–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–¥–∞—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –Ω–∞–∑–≤—É —Ç–µ–≥—É (translations.uk.name).', 400));
    }

    const ukName = translations.uk.name.trim();
    let slug = slugify(ukName, { lower: true, strict: true, locale: 'uk' });

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ slug
    const existingTag = await Tag.findOne({ slug });
    if (existingTag) {
        const existingUkTranslation = await Translation.findOne({ refId: existingTag._id, refModel: 'Tag', lang: 'uk' }).lean();
        if (existingUkTranslation?.fields?.name === ukName) {
            return next(new AppError(`–¢–µ–≥ "${ukName}" (slug: '${slug}') –≤–∂–µ —ñ—Å–Ω—É—î.`, 409));
        } else {
            const uniqueSuffix = crypto.randomBytes(3).toString('hex');
            slug = `${slug}-${uniqueSuffix}`;
            console.warn(`–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–∏–π slug –¥–ª—è —Ç–µ–≥—É "${ukName}" —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç: ${slug}`.yellow);
        }
    }

    // 1. –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–≥
    const newTag = await Tag.create({ slug });

    // 2. –ì–æ—Ç—É—î–º–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
    const translationDocs = Object.entries(translations || {}).map(([lang, fields]) => {
        const name = fields?.name?.trim();
        if (!name) return null; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –Ω–∞–∑–≤–∞
        return { refId: newTag._id, refModel: 'Tag', lang: lang, fields: { name } };
    }).filter(Boolean);

    if (!translationDocs.some(t => t.lang === 'uk')) {
        await Tag.findByIdAndDelete(newTag._id); // Rollback
        return next(new AppError('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ–≥ —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –Ω–∞–∑–≤–∏.', 400));
    }

    try {
        if (translationDocs.length > 0) {
            await Translation.insertMany(translationDocs);
            console.log(`–°—Ç–≤–æ—Ä–µ–Ω–æ ${translationDocs.length} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è —Ç–µ–≥—É ${newTag._id}`.green);
        }
    } catch (translationError) {
        await Tag.findByIdAndDelete(newTag._id); // Rollback
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ —Ç–µ–≥—É:", translationError);
        if (translationError.code === 11000 || translationError.code === 11001) {
            return next(new AppError('–ü–æ–º–∏–ª–∫–∞: –î—É–±–ª—é—é—á–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ–≥—É —Ç–∞ –º–æ–≤–∏.', 409));
        }
        return next(new AppError('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ —Ç–µ–≥—É.', 500));
    }

    // 3. –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º
    try {
        await sendTelegramNotification(`üè∑Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —Ç–µ–≥: "${ukName}" (slug: ${slug})`);
    } catch (e) { console.error('Telegram notification error (create tag):', e); }

    // 4. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Ç–µ–≥ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º
    const createdTagWithUkTranslation = (await getLocalizedData([newTag.toObject()], 'uk', 'uk', 'Tag', TAG_TRANSLATABLE_FIELDS))[0];

    res.status(201).json({ status: 'success', data: createdTagWithUkTranslation || newTag });
});

// --- GET ALL TAGS (Public) ---
exports.getAllTags = catchAsync(async (req, res, next) => {
    const lang = req.query.lang || 'uk';
    const features = new APIFeatures(Tag.find(), req.query)
        // .filter() // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞–∑–≤–∏—á–∞–π –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–ª—è –≤—Å—ñ—Ö —Ç–µ–≥—ñ–≤
        .sort(req.query.sort || '-storyCount') // –ó–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—é (–∫—ñ–ª—å–∫—ñ—Å—Ç—é —ñ—Å—Ç–æ—Ä—ñ–π)
        .limitFields('-__v')
        .paginate(DEFAULT_TAG_PAGINATION_LIMIT); // –ë—ñ–ª—å—à–∏–π –ª—ñ–º—ñ—Ç

    const tags = await features.query.lean();
    const totalDocuments = await Tag.countDocuments(features.getQueryFilter());

    // –õ–æ–∫–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–∑–≤–∏
    const localizedTags = await getLocalizedData(tags, lang, 'uk', 'Tag', TAG_TRANSLATABLE_FIELDS);

    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—é –Ω–∞–∑–≤–æ—é
    if (req.query.sort === 'name') {
        localizedTags.sort((a, b) => (a.name || '').localeCompare(b.name || '', lang));
    } else if (req.query.sort === '-name') {
        localizedTags.sort((a, b) => (b.name || '').localeCompare(a.name || '', lang));
    }

    res.status(200).json({
        status: 'success',
        results: localizedTags.length,
        data: localizedTags,
        pagination: {
            currentPage: features.pagination.currentPage,
            limit: features.pagination.limit,
            totalPages: Math.ceil(totalDocuments / features.pagination.limit),
            totalResults: totalDocuments,
        }
    });
});

// --- GET ONE TAG (Public) ---
exports.getTag = catchAsync(async (req, res, next) => {
    const queryParam = req.params.idOrSlug;
    const lang = req.query.lang || 'uk';

    const isObjectId = mongoose.Types.ObjectId.isValid(queryParam);
    const query = isObjectId ? { _id: queryParam } : { slug: queryParam };

    const tag = await Tag.findOne(query).lean();
    if (!tag) return next(new AppError('–¢–µ–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', 404));

    const localizedTag = (await getLocalizedData([tag], lang, 'uk', 'Tag', TAG_TRANSLATABLE_FIELDS))[0];
    if (!localizedTag) return next(new AppError('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Ç–µ–≥—É.', 500));

    res.status(200).json({ status: 'success', data: localizedTag });
});

// --- UPDATE TAG (Admin only) ---
exports.updateTag = catchAsync(async (req, res, next) => {
    const queryParam = req.params.idOrSlug;
    const lang = req.query.lang || 'uk'; // –ú–æ–≤–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const { translations } = req.body; // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç—ñ–ª–∞ - –≤ middleware

    const isObjectId = mongoose.Types.ObjectId.isValid(queryParam);
    const query = isObjectId ? { _id: queryParam } : { slug: queryParam };

    const tag = await Tag.findOne(query);
    if (!tag) return next(new AppError('–¢–µ–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', 404));

    let needsTagSave = false;
    let slugNeedsUpdate = false;
    let newSlug = tag.slug;
    let originalUkName = tag.slug; // Fallback –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    let translationsChanged = false;
    const oldSlug = tag.slug; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ä–∏–π slug –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—è—Ö

    if (translations && typeof translations === 'object') {
        const currentTranslations = await Translation.find({ refId: tag._id, refModel: 'Tag' }).lean();
        const currentTransMap = currentTranslations.reduce((map, t) => {
            map[t.lang] = t.fields instanceof Map ? Object.fromEntries(t.fields) : (t.fields || {});
            return map;
        }, {});
        originalUkName = currentTransMap['uk']?.name || tag.slug;

        const bulkOps = [];
        let ukNameChanged = false;
        let newUkName = '';

        for (const [langCode, fields] of Object.entries(translations)) {
            if (fields?.name !== undefined) { // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ name
                const newName = String(fields.name).trim();
                if (langCode === 'uk' && !newName) {
                    return next(new AppError('–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –Ω–∞–∑–≤–∞ —Ç–µ–≥—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.', 400));
                }
                const currentName = currentTransMap[langCode]?.name || '';
                if (newName !== currentName) {
                    translationsChanged = true;
                    const updateSetData = { [`fields.name`]: newName };
                    bulkOps.push({
                        updateOne: {
                            filter: { refId: tag._id, refModel: 'Tag', lang: langCode },
                            update: { $set: updateSetData },
                            upsert: true
                        }
                    });
                    if (langCode === 'uk') { ukNameChanged = true; newUkName = newName; }
                }
            }
        }

        if (bulkOps.length > 0) {
            try { await Translation.bulkWrite(bulkOps); }
            catch (err) { return next(new AppError('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ —Ç–µ–≥—É.', 500)); }
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ slug, —è–∫—â–æ –∑–º—ñ–Ω–∏–ª–∞—Å—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –Ω–∞–∑–≤–∞
        if (ukNameChanged && newUkName) {
            const generatedSlug = slugify(newUkName, { lower: true, strict: true, locale: 'uk' });
            if (generatedSlug !== tag.slug) {
                const existingSlug = await Tag.findOne({ slug: generatedSlug, _id: { $ne: tag._id } });
                if (existingSlug) return next(new AppError(`Slug '${generatedSlug}' (${newUkName}) –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —ñ–Ω—à–∏–º —Ç–µ–≥–æ–º.`, 409));
                newSlug = generatedSlug;
                slugNeedsUpdate = true;
            }
        }
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ slug –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ Tag —Ç–∞ –≤ —ñ—Å—Ç–æ—Ä—ñ—è—Ö
    if (slugNeedsUpdate) {
        tag.slug = newSlug;
        needsTagSave = true;
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç, —è–∫—â–æ –±—É–ª–∏ –∑–º—ñ–Ω–∏
    if (needsTagSave) {
        await tag.save({ validateBeforeSave: false });

        // --- –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–≥ –≤ —ñ—Å—Ç–æ—Ä—ñ—è—Ö, —è–∫—â–æ slug –∑–º—ñ–Ω–∏–≤—Å—è ---
        if (oldSlug && oldSlug !== newSlug) {
            console.log(`–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–≥—É –≤ —ñ—Å—Ç–æ—Ä—ñ—è—Ö: ${oldSlug} -> ${newSlug}`.blue);
            try {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ updateMany –∑ $set –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É
                // –í–∞–∂–ª–∏–≤–æ: –¶–µ –æ–Ω–æ–≤–ª—é—î —Ç—ñ–ª—å–∫–∏ –ü–ï–†–®–ï –≤—Ö–æ–¥–∂–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ slug!
                // –Ø–∫—â–æ —Ç–µ–≥–∏ –º–æ–∂—É—Ç—å –¥—É–±–ª—é–≤–∞—Ç–∏—Å—è (–Ω–µ –ø–æ–≤–∏–Ω–Ω—ñ), –ª–æ–≥—ñ–∫–∞ —Å–∫–ª–∞–¥–Ω—ñ—à–∞.
                const storyUpdateResult = await Story.updateMany(
                    { tags: oldSlug },
                    { $set: { "tags.$": newSlug } }
                );
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ (–º–µ–Ω—à –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∞, –∞–ª–µ –æ–±—Ä–æ–±–ª—è—î –¥—É–±–ª—ñ–∫–∞—Ç–∏):
                // const storiesToUpdate = await Story.find({ tags: oldSlug }).select('_id tags');
                // const storyBulkOps = storiesToUpdate.map(story => ({
                //     updateOne: {
                //         filter: { _id: story._id },
                //         update: { tags: story.tags.map(t => t === oldSlug ? newSlug : t) }
                //     }
                // }));
                // if (storyBulkOps.length > 0) await Story.bulkWrite(storyBulkOps);

                console.log(`–¢–µ–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ ${storyUpdateResult.modifiedCount} —ñ—Å—Ç–æ—Ä—ñ—è—Ö: ${oldSlug} -> ${newSlug}`.cyan);
            } catch (storyUpdateError) {
                console.error(`–ü–û–ú–ò–õ–ö–ê –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–≥—É "${oldSlug}" –≤ —ñ—Å—Ç–æ—Ä—ñ—è—Ö:`.red.bold, storyUpdateError);
                // –†–æ–∑–≥–ª—è–Ω—É—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—ñ–¥–∫–∞—Ç—É –∑–º—ñ–Ω–∏ slug —Ç–µ–≥—É, —è–∫—â–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ–π –∫—Ä–∏—Ç–∏—á–Ω–µ
                // await Tag.updateOne({ _id: tag._id }, { slug: oldSlug }); // –í—ñ–¥–∫–∞—Ç
                // return next(new AppError('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–≥—É –≤ —ñ—Å—Ç–æ—Ä—ñ—è—Ö.', 500));
            }
        }
    }

    // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    if (needsTagSave || translationsChanged) {
        try {
            const changes = [];
            if (slugNeedsUpdate) changes.push(`slug (–Ω–æ–≤–∏–π: ${tag.slug})`);
            if (translationsChanged) changes.push('–ø–µ—Ä–µ–∫–ª–∞–¥–∏');
            if (changes.length > 0) {
                await sendTelegramNotification(`üè∑Ô∏è –û–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–≥: "${originalUkName}" (ID: ${tag._id}). –ó–º—ñ–Ω–µ–Ω–æ: ${changes.join(', ')}.`);
            }
        } catch(e) { console.error('Telegram notification error (update tag):', e); }
    }

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–µ–≥
    const updatedTag = await Tag.findById(tag._id).lean();
    const updatedLocalizedTag = (await getLocalizedData([updatedTag], lang, 'uk', 'Tag', TAG_TRANSLATABLE_FIELDS))[0];

    res.status(200).json({ status: 'success', data: updatedLocalizedTag });
});


// --- DELETE TAG (Admin only) ---
exports.deleteTag = catchAsync(async (req, res, next) => {
    const queryParam = req.params.idOrSlug;
    const isObjectId = mongoose.Types.ObjectId.isValid(queryParam);
    const query = isObjectId ? { _id: queryParam } : { slug: queryParam };

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ findOneAndDelete, —â–æ–± —Å–ø—Ä–∞—Ü—é–≤–∞–≤ post hook
    const tag = await Tag.findOneAndDelete(query);
    if (!tag) return next(new AppError('–¢–µ–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', 404));

    // –•—É–∫ post('findOneAndDelete') –≤ –º–æ–¥–µ–ª—ñ Tag —Ç–µ–ø–µ—Ä –≤–∏–¥–∞–ª—è—î –ø–µ—Ä–µ–∫–ª–∞–¥–∏ —Ç–∞ –æ–Ω–æ–≤–ª—é—î —ñ—Å—Ç–æ—Ä—ñ—ó.

    // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º
    try {
        // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –Ω–∞–∑–≤—É (—à—É–∫–∞—î–º–æ –æ–∫—Ä–µ–º–æ)
        const ukTranslation = await Translation.findOne({ refId: tag._id, refModel: 'Tag', lang: 'uk' }).lean();
        const tagNameForNotification = ukTranslation?.fields?.name || tag.slug;

        await sendTelegramNotification(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ç–µ–≥: "${tagNameForNotification}" (slug: ${tag.slug}, ID: ${tag._id})`);
    } catch (e) { console.error('Telegram notification error (delete tag):', e); }

    res.status(204).json({ status: 'success', data: null });
});
// --- END OF FILE controllers/tagController.js ---