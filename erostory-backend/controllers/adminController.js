// --- START OF FILE controllers/adminController.js ---
const mongoose = require('mongoose');
const catchAsync = require('../utils/catchAsync');
const AppError = require('../utils/AppError');
const Story = require('../models/Story');
const Comment = require('../models/Comment');
const User = require('../models/User');
const Category = require('../models/Category');
const Setting = require('../models/Setting');
const Report = require('../models/Report'); // –î–æ–¥–∞–Ω–æ Report
const APIFeatures = require('../utils/apiFeatures');
const getLocalizedData = require('../utils/getLocalizedData');
const sendTelegramNotification = require('../utils/telegramNotifier');
const sendEmail = require('../utils/email');
require('colors'); // –î–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è

// --- –î–∞—à–±–æ—Ä–¥ ---
exports.getDashboardStats = catchAsync(async (req, res, next) => {
    // –ê–≥—Ä–µ–≥–∞—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
    const [storyStats, userStats, commentStats, reportStats] = await Promise.all([
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ñ—Å—Ç–æ—Ä—ñ–π
        Story.aggregate([
            {
                $group: {
                    _id: null, // –ì—Ä—É–ø—É—î–º–æ –≤—Å—ñ
                    totalStories: { $sum: 1 },
                    pendingStories: { $sum: { $cond: [{ $eq: ['$status', 'pending'] }, 1, 0] } },
                    publishedStories: { $sum: { $cond: [{ $eq: ['$status', 'published'] }, 1, 0] } },
                    draftStories: { $sum: { $cond: [{ $eq: ['$status', 'draft'] }, 1, 0] } },
                    rejectedStories: { $sum: { $cond: [{ $eq: ['$status', 'rejected'] }, 1, 0] } },
                    totalViews: { $sum: '$views' },
                    totalLikes: { $sum: '$likes' },
                    totalBookmarks: { $sum: '$bookmarks' },
                }
            }
        ]),
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        User.aggregate([
            {
                $group: {
                    _id: null,
                    totalUsers: { $sum: 1 },
                    activeUsers: { $sum: { $cond: ['$isActive', 1, 0] } },
                    inactiveUsers: { $sum: { $cond: ['$isActive', 0, 1] } }, // –†–∞—Ö—É—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö
                    premiumUsers: { $sum: { $cond: ['$isPremium', 1, 0] } },
                    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä–æ–ª—è–º–∏ (–≤—Å—ñ—Ö, –≤–∫–ª—é—á–∞—é—á–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –æ–≥–ª—è–¥—É)
                    userRoleCount: { $sum: { $cond: [{ $eq: ['$role', 'user'] }, 1, 0] } },
                    authorRoleCount: { $sum: { $cond: [{ $eq: ['$role', 'author'] }, 1, 0] } },
                    moderatorRoleCount: { $sum: { $cond: [{ $eq: ['$role', 'moderator'] }, 1, 0] } },
                    adminRoleCount: { $sum: { $cond: [{ $eq: ['$role', 'admin'] }, 1, 0] } },
                }
            }
        ]),
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
        Comment.aggregate([
            {
                $group: {
                    _id: null,
                    totalComments: { $sum: 1 },
                    pendingComments: { $sum: { $cond: [{ $eq: ['$status', 'pending'] }, 1, 0] } },
                    approvedComments: { $sum: { $cond: [{ $eq: ['$status', 'approved'] }, 1, 0] } },
                    rejectedComments: { $sum: { $cond: [{ $eq: ['$status', 'rejected'] }, 1, 0] } },
                }
            }
        ]),
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞—Ä–≥ (–î–æ–¥–∞–Ω–æ)
        Report.aggregate([
            {
                $group: {
                    _id: null,
                    totalReports: { $sum: 1 },
                    newReports: { $sum: { $cond: [{ $eq: ['$status', 'new'] }, 1, 0] } },
                    inProgressReports: { $sum: { $cond: [{ $eq: ['$status', 'in_progress'] }, 1, 0] } },
                }
            }
        ])
    ]);

    // –û–±'—î–¥–Ω—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –æ–±—Ä–æ–±–ª—è—é—á–∏ –º–æ–∂–ª–∏–≤—É –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö ([0] –ø–æ–≤–µ—Ä—Ç–∞—î –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –∞–±–æ undefined)
    const s = storyStats[0] || {};
    const u = userStats[0] || {};
    const c = commentStats[0] || {};
    const r = reportStats[0] || {};

    const dashboardData = {
        stories: {
            total: s.totalStories || 0,
            pending: s.pendingStories || 0,
            published: s.publishedStories || 0,
            draft: s.draftStories || 0,
            rejected: s.rejectedStories || 0,
            views: s.totalViews || 0,
            likes: s.totalLikes || 0,
            bookmarks: s.totalBookmarks || 0,
        },
        users: {
            total: u.totalUsers || 0,
            active: u.activeUsers || 0,
            inactive: u.inactiveUsers || 0,
            premium: u.premiumUsers || 0,
            roles: {
                user: u.userRoleCount || 0,
                author: u.authorRoleCount || 0,
                moderator: u.moderatorRoleCount || 0,
                admin: u.adminRoleCount || 0,
            }
        },
        comments: {
            total: c.totalComments || 0,
            pending: c.pendingComments || 0,
            approved: c.approvedComments || 0,
            rejected: c.rejectedComments || 0,
        },
        reports: {
            total: r.totalReports || 0,
            new: r.newReports || 0,
            inProgress: r.inProgressReports || 0,
        }
    };

    res.status(200).json({
        status: 'success',
        data: dashboardData,
    });
});

// --- –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –Ü—Å—Ç–æ—Ä—ñ–π ---
exports.getPendingStories = catchAsync(async (req, res, next) => {
    const features = new APIFeatures(
        Story.find({ status: 'pending' })
            .populate('author', 'name email avatarUrl') // –î–æ–¥–∞—î–º–æ –∞–≤–∞—Ç–∞—Ä
            .populate('category', 'slug'), // Slug –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID
        req.query
    )
        .sort(req.query.sort || '-createdAt') // –ù–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É
        .paginate(15); // –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è

    const stories = await features.query.lean();
    const totalDocuments = await Story.countDocuments({ status: 'pending' }); // –†–∞—Ö—É—î–º–æ —Ç—ñ–ª—å–∫–∏ pending

    // –õ–æ–∫–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–∑–≤–∏ —ñ—Å—Ç–æ—Ä—ñ–π —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (—Ç—ñ–ª—å–∫–∏ 'uk' –¥–ª—è –∞–¥–º—ñ–Ω–∫–∏)
    const localizedStories = await getLocalizedData(stories, 'uk', 'uk', 'Story', ['title']);

    const categoryIds = [...new Set(localizedStories.map(s => s.category?._id?.toString()).filter(Boolean))];
    let categoryMap = {};
    if(categoryIds.length > 0) {
        const categoriesData = await Category.find({ _id: { $in: categoryIds } }).select('slug').lean();
        const localizedCategories = await getLocalizedData(categoriesData, 'uk', 'uk', 'Category', ['name']);
        categoryMap = localizedCategories.reduce((map, cat) => {
            map[cat._id.toString()] = { name: cat.name, slug: cat.slug };
            return map;
        }, {});
    }

    localizedStories.forEach(story => {
        if (story.category?._id) {
            const catInfo = categoryMap[story.category._id.toString()];
            story.category.name = catInfo?.name || story.category.slug || 'N/A';
            story.category.slug = catInfo?.slug; // –î–æ–¥–∞—î–º–æ slug
        } else {
            story.category = null;
        }
    });

    res.status(200).json({
        status: 'success',
        results: localizedStories.length,
        data: localizedStories,
        pagination: {
            currentPage: features.pagination.currentPage,
            limit: features.pagination.limit,
            totalPages: Math.ceil(totalDocuments / features.pagination.limit),
            totalResults: totalDocuments,
        }
    });
});

exports.approveStory = catchAsync(async (req, res, next) => {
    const story = await Story.findById(req.params.id)
        .populate('author', 'name email telegramUserId preferredLang'); // –î–æ–¥–∞—î–º–æ preferredLang

    if (!story) return next(new AppError('–Ü—Å—Ç–æ—Ä—ñ—é –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', 404));
    if (story.status === 'published') { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ —Å—Ö–≤–∞–ª–µ–Ω–æ
        return res.status(200).json({ status: 'success', message: '–Ü—Å—Ç–æ—Ä—ñ—è –≤–∂–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞.', data: story });
    }

    story.status = 'published';
    story.moderatedBy = req.user._id;
    story.moderatedAt = Date.now();
    story.rejectionReason = null; // –û—á–∏—â—É—î–º–æ –ø—Ä–∏—á–∏–Ω—É
    await story.save(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ, —â–æ–± —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∏ —Ö—É–∫–∏

    // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É
    if (story.author) {
        try {
            const authorLang = story.author.preferredLang || 'uk';
            // –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—É –Ω–∞–∑–≤—É
            const titleForNotification = (await getLocalizedData([story.toObject()], authorLang, 'uk', 'Story', ['title']))[0]?.title || story.slug;
            const storyUrl = `${process.env.FRONTEND_URL || ''}/story-detailed.html?id=${story._id}`;
            // TODO: –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å
            const message = `üéâ –í—ñ—Ç–∞—î–º–æ, ${story.author.name || '–ê–≤—Ç–æ—Ä'}! –í–∞—à—É —ñ—Å—Ç–æ—Ä—ñ—é "<a href="${storyUrl}">${titleForNotification}</a>" –±—É–ª–æ —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!`;
            const telegramMessageAdmin = `‚úÖ –Ü—Å—Ç–æ—Ä—ñ—è "<a href="${storyUrl}">${titleForNotification}</a>" (ID: ${story._id}) —Å—Ö–≤–∞–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${req.user.name}.`;

            if (story.author.email) {
                sendEmail({ email: story.author.email, subject: '–í–∞—à—É —ñ—Å—Ç–æ—Ä—ñ—é –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!', message: message.replace(/<[^>]*>?/gm, ''), html: message }).catch(e=>console.error(e));
            }
            if (story.author.telegramUserId) {
                sendTelegramNotification(message, { parse_mode: 'HTML' }, story.author.telegramUserId).catch(e=>console.error(e));
            }
            sendTelegramNotification(telegramMessageAdmin, { parse_mode: 'HTML' }).catch(e=>console.error(e)); // –í –∞–¥–º—ñ–Ω —á–∞—Ç

        } catch(notificationError) { console.error(`–ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó ${story._id}:`, notificationError); }
    }

    console.log(`–Ü—Å—Ç–æ—Ä—ñ—è ${story._id} —Å—Ö–≤–∞–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${req.user.name}`.green);
    res.status(200).json({ status: 'success', data: story });
});

exports.rejectStory = catchAsync(async (req, res, next) => {
    const { rejectionReason } = req.body; // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤ middleware

    const story = await Story.findById(req.params.id)
        .populate('author', 'name email telegramUserId preferredLang');

    if (!story) return next(new AppError('–Ü—Å—Ç–æ—Ä—ñ—é –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', 404));
    if (story.status === 'rejected') { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ
        return res.status(200).json({ status: 'success', message: '–Ü—Å—Ç–æ—Ä—ñ—è –≤–∂–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.', data: story });
    }

    story.status = 'rejected';
    story.rejectionReason = rejectionReason.trim();
    story.moderatedBy = req.user._id;
    story.moderatedAt = Date.now();
    await story.save(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ, —â–æ–± —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∏ —Ö—É–∫–∏

    // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É
    if (story.author) {
        try {
            const authorLang = story.author.preferredLang || 'uk';
            const titleForNotification = (await getLocalizedData([story.toObject()], authorLang, 'uk', 'Story', ['title']))[0]?.title || story.slug;
            const storyUrl = `${process.env.FRONTEND_URL || ''}/profile.html`; // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            // TODO: –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å
            const message = `üôÅ –ù–∞ –∂–∞–ª—å, ${story.author.name || '–ê–≤—Ç–æ—Ä'}, –≤–∞—à—É —ñ—Å—Ç–æ—Ä—ñ—é "${titleForNotification}" –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n–ü—Ä–∏—á–∏–Ω–∞: ${rejectionReason.trim()}\n–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ó—ó –≤ <a href="${storyUrl}">–ø—Ä–æ—Ñ—ñ–ª—ñ</a> —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É –º–æ–¥–µ—Ä–∞—Ü—ñ—é.`;
            const telegramMessageAdmin = `‚ùå –Ü—Å—Ç–æ—Ä—ñ—è "${titleForNotification}" (ID: ${story._id}) –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${req.user.name}. –ü—Ä–∏—á–∏–Ω–∞: ${rejectionReason.trim()}`;

            if (story.author.email) {
                sendEmail({ email: story.author.email, subject: '–í–∞—à—É —ñ—Å—Ç–æ—Ä—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ', message: message.replace(/<[^>]*>?/gm, ''), html: message }).catch(e=>console.error(e));
            }
            if (story.author.telegramUserId) {
                sendTelegramNotification(message, { parse_mode: 'HTML' }, story.author.telegramUserId).catch(e=>console.error(e));
            }
            sendTelegramNotification(telegramMessageAdmin, { parse_mode: 'HTML' }).catch(e=>console.error(e)); // –í –∞–¥–º—ñ–Ω —á–∞—Ç

        } catch(notificationError) { console.error(`–ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó ${story._id}:`, notificationError); }
    }


    console.log(`–Ü—Å—Ç–æ—Ä—ñ—è ${story._id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${req.user.name}`.yellow);
    res.status(200).json({ status: 'success', data: story });
});

// --- –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ ---
exports.getPendingComments = catchAsync(async (req, res, next) => {
    const features = new APIFeatures(
        Comment.find({ status: 'pending' })
            .populate('author', 'name email avatarUrl')
            .populate({ path: 'story', select: 'title slug' }),
        req.query
    )
        .sort(req.query.sort || '-createdAt')
        .paginate(20);

    const comments = await features.query.lean();
    const totalDocuments = await Comment.countDocuments({ status: 'pending' });

    // –õ–æ–∫–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–∑–≤–∏ —ñ—Å—Ç–æ—Ä—ñ–π
    const storyIds = [...new Set(comments.map(c => c.story?._id?.toString()).filter(Boolean))];
    let storyMap = {};
    if (storyIds.length > 0) {
        const storiesData = await Story.find({ _id: { $in: storyIds } }).select('title slug').lean();
        const localizedStories = await getLocalizedData(storiesData, 'uk', 'uk', 'Story', ['title']);
        storyMap = localizedStories.reduce((map, story) => {
            map[story._id.toString()] = { title: story.title, slug: story.slug };
            return map;
        }, {});
    }

    comments.forEach(comment => {
        if (comment.story?._id) {
            const storyInfo = storyMap[comment.story._id.toString()];
            comment.story.title = storyInfo?.title || comment.story.slug || 'N/A';
            comment.story.slug = storyInfo?.slug;
        }
    });

    res.status(200).json({
        status: 'success',
        results: comments.length,
        data: comments,
        pagination: {
            currentPage: features.pagination.currentPage,
            limit: features.pagination.limit,
            totalPages: Math.ceil(totalDocuments / features.pagination.limit),
            totalResults: totalDocuments,
        }
    });
});

exports.approveComment = catchAsync(async (req, res, next) => {
    const comment = await Comment.findById(req.params.id)
        .populate('author', 'name email telegramUserId preferredLang'); // –î–æ–¥–∞—î–º–æ preferredLang

    if (!comment) return next(new AppError('–ö–æ–º–µ–Ω—Ç–∞—Ä –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', 404));
    if (comment.status === 'approved') {
        return res.status(200).json({ status: 'success', message: '–ö–æ–º–µ–Ω—Ç–∞—Ä –≤–∂–µ —Å—Ö–≤–∞–ª–µ–Ω–æ.', data: comment });
    }

    comment.status = 'approved';
    await comment.save(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ö—É–∫–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤

    // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    if (comment.author) {
        try {
            const authorLang = comment.author.preferredLang || 'uk';
            const story = await Story.findById(comment.story).select('title slug').lean();
            const storyTitle = story ? (await getLocalizedData([story], authorLang, 'uk', 'Story', ['title']))[0]?.title || story.slug : '—ñ—Å—Ç–æ—Ä—ñ—ó';
            const commentLink = `${process.env.FRONTEND_URL || ''}/story-detailed.html?id=${comment.story}#comment-${comment._id}`;
            // TODO: i18n
            const message = `‚úÖ –í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó "<a href='${commentLink}'>${storyTitle}</a>" —Å—Ö–≤–∞–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.`;

            if (comment.author.email) {
                sendEmail({ email: comment.author.email, subject: '–í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä —Å—Ö–≤–∞–ª–µ–Ω–æ!', message: message.replace(/<[^>]*>?/gm, ''), html: message }).catch(e=>console.error(e));
            }
            if (comment.author.telegramUserId) {
                sendTelegramNotification(message, { parse_mode: 'HTML' }, comment.author.telegramUserId).catch(e=>console.error(e));
            }
        } catch (notificationError) { console.error(`–ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è ${comment._id}:`, notificationError); }
    }

    console.log(`–ö–æ–º–µ–Ω—Ç–∞—Ä ${comment._id} —Å—Ö–≤–∞–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${req.user.name}`.green);
    res.status(200).json({ status: 'success', data: comment });
});

exports.rejectComment = catchAsync(async (req, res, next) => {
    const comment = await Comment.findById(req.params.id)
        .populate('author', 'name email telegramUserId preferredLang');

    if (!comment) return next(new AppError('–ö–æ–º–µ–Ω—Ç–∞—Ä –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', 404));
    if (comment.status === 'rejected') {
        return res.status(200).json({ status: 'success', message: '–ö–æ–º–µ–Ω—Ç–∞—Ä –≤–∂–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.', data: comment });
    }

    comment.status = 'rejected';
    await comment.save(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ö—É–∫–∏

    // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    if (comment.author) {
        try {
            const authorLang = comment.author.preferredLang || 'uk';
            const story = await Story.findById(comment.story).select('title slug').lean();
            const storyTitle = story ? (await getLocalizedData([story], authorLang, 'uk', 'Story', ['title']))[0]?.title || story.slug : '—ñ—Å—Ç–æ—Ä—ñ—ó';
            // TODO: i18n
            const message = `üö´ –í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó "${storyTitle}" –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.`;

            if (comment.author.email) {
                sendEmail({ email: comment.author.email, subject: '–í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ', message }).catch(e=>console.error(e));
            }
            if (comment.author.telegramUserId) {
                sendTelegramNotification(message, {}, comment.author.telegramUserId).catch(e=>console.error(e));
            }
        } catch (notificationError) { console.error(`–ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è ${comment._id}:`, notificationError); }
    }


    console.log(`–ö–æ–º–µ–Ω—Ç–∞—Ä ${comment._id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${req.user.name}`.yellow);
    res.status(200).json({ status: 'success', data: comment });
});


// --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –°–∞–π—Ç—É (Admin only) ---

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
const getOrCreateSettings = async () => {
    let settings = await Setting.findOne();
    if (!settings) {
        console.log('–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–∞–π—Ç—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º...'.cyan);
        settings = await Setting.create({
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ .env –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
            siteName: process.env.SITE_NAME || 'EroStory',
            defaultLang: process.env.DEFAULT_LANG || 'uk',
            storiesPerPage: parseInt(process.env.STORIES_PER_PAGE || '12', 10),
            commentsModeration: (process.env.COMMENTS_MODERATION !== 'false'), // default true
            allowGuestComments: (process.env.ALLOW_GUEST_COMMENTS === 'true'), // default false
        });
    }
    return settings;
};

exports.getSettings = catchAsync(async (req, res, next) => {
    const settings = await getOrCreateSettings();
    res.status(200).json({ status: 'success', data: settings });
});

exports.updateSettings = catchAsync(async (req, res, next) => {
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–æ–ª—è —Ç–∞ –≤–∞–ª—ñ–¥—É—î–º–æ —ó—Ö (–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –≤ middleware)
    const allowedFields = ['siteName', 'defaultLang', 'storiesPerPage', 'commentsModeration', 'allowGuestComments'];
    const updateData = filterObj(req.body, ...allowedFields);

    if (Object.keys(updateData).length === 0) {
        return next(new AppError('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.', 400));
    }

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ findOneAndUpdate –±–µ–∑ upsert, –±–æ getOrCreateSettings –≥–∞—Ä–∞–Ω—Ç—É—î —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const updatedSettings = await Setting.findOneAndUpdate({}, updateData, {
        new: true,
        runValidators: true
    });

    if (!updatedSettings) {
        // –ú–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–æ, –∞–ª–µ –º–æ–∂–ª–∏–≤–æ, —è–∫—â–æ –¥–æ–∫—É–º–µ–Ω—Ç –≤–∏–¥–∞–ª–∏–ª–∏ –≤—Ä—É—á–Ω—É
        console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.'.red);
        return next(new AppError('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.', 500));
    }

    console.log(`–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∞–π—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${req.user.name}`.cyan);
    res.status(200).json({ status: 'success', data: updatedSettings });
});
// --- END OF FILE controllers/adminController.js ---