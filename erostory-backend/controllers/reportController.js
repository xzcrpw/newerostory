// --- START OF FILE controllers/reportController.js ---
const mongoose = require('mongoose');
const Report = require('../models/Report');
const Story = require('../models/Story');
const Comment = require('../models/Comment');
const User = require('../models/User');
const catchAsync = require('../utils/catchAsync');
const AppError = require('../utils/AppError');
const APIFeatures = require('../utils/apiFeatures');
const sendTelegramNotification = require('../utils/telegramNotifier');
const sendEmail = require('../utils/email');
require('colors');

// --- CREATE REPORT (Logged in users) ---
exports.createReport = catchAsync(async (req, res, next) => {
    const { type, reportedItem, reason } = req.body;
    const reporterId = req.user._id; // ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ —Å–∫–∞—Ä–∂–∏—Ç—å—Å—è

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö (–≤–∂–µ —î –≤ middleware)
    if (!type || !reportedItem || !reason) {
        return next(new AppError('–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ç–∏–ø, ID –æ–±\'—î–∫—Ç–∞ —Ç–∞ –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Ä–≥–∏.', 400));
    }
    if (!['story', 'comment', 'user'].includes(type)) {
        return next(new AppError('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–∏–ø –æ–±\'—î–∫—Ç–∞ —Å–∫–∞—Ä–≥–∏.', 400));
    }
    if (!mongoose.Types.ObjectId.isValid(reportedItem)) {
        return next(new AppError('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –æ–±\'—î–∫—Ç–∞ —Å–∫–∞—Ä–≥–∏.', 400));
    }
    if (reason.trim().length < 10 || reason.trim().length > 500) {
        return next(new AppError('–ü—Ä–∏—á–∏–Ω–∞ —Å–∫–∞—Ä–≥–∏ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 10 –¥–æ 500 —Å–∏–º–≤–æ–ª—ñ–≤.', 400));
    }

    // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —Å–∫–∞—Ä–∂–∏—Ç—å—Å—è —Å–∞–º –Ω–∞ —Å–µ–±–µ
    if (type === 'user' && reportedItem.toString() === reporterId.toString()) {
        return next(new AppError('–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—è —Å–∞–º—ñ –Ω–∞ —Å–µ–±–µ.', 400));
    }

    // 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞ —Å–∫–∞—Ä–≥–∏
    let Model;
    if (type === 'story') Model = Story;
    else if (type === 'comment') Model = Comment;
    else if (type === 'user') Model = User;
    else return next(new AppError('–ü–æ–º–∏–ª–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Å–∫–∞—Ä–≥–∏.', 500)); // –ú–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–æ

    const itemExists = await Model.exists({ _id: reportedItem });
    if (!itemExists) {
        return next(new AppError(`–û–±'—î–∫—Ç —Å–∫–∞—Ä–≥–∏ (—Ç–∏–ø: ${type}, ID: ${reportedItem}) –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, –π–æ–≥–æ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.`, 404));
    }

    // 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—é—é—á—É —Å–∫–∞—Ä–≥—É –≤—ñ–¥ —Ü—å–æ–≥–æ –∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const existingReport = await Report.findOne({ reporter: reporterId, reportedItem, type, status: { $in: ['new', 'in_progress'] } });
    if (existingReport) {
        console.warn(`–ü–æ–≤—Ç–æ—Ä–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Å–∫–∞—Ä–≥–∞ –≤—ñ–¥ ${reporterId} –Ω–∞ ${type} ${reportedItem}.`);
        // –ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫—É –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        return res.status(200).json({
            status: 'success',
            message: '–í–∞—à–∞ —Å–∫–∞—Ä–≥–∞ –Ω–∞ —Ü–µ–π –æ–±\'—î–∫—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –∞–±–æ –±—É–ª–∞ –Ω–µ—â–æ–¥–∞–≤–Ω–æ –ø–æ–¥–∞–Ω–∞.'
        });
    }

    // 4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫–∞—Ä–≥–∏
    const newReport = await Report.create({
        type,
        reportedItem,
        reason: reason.trim(),
        reporter: reporterId
    });

    // 5. –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
    try {
        const adminBaseUrl = process.env.ADMIN_URL || process.env.FRONTEND_URL || '';
        // –§–æ—Ä–º—É—î–º–æ URL –∞–¥–º—ñ–Ω–∫–∏ (–ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ä–æ—É—Ç/—Å—Ç–æ—Ä—ñ–Ω–∫—É)
        const reportAdminLink = `${adminBaseUrl}/admin/reports.html?reportId=${newReport._id}`;
        const message = `üîî –ù–æ–≤–∞ —Å–∫–∞—Ä–≥–∞! (ID: ${newReport._id})
–¢–∏–ø: ${type}
ID –û–±'—î–∫—Ç–∞: ${reportedItem}
–ü—Ä–∏—á–∏–Ω–∞: ${reason.trim().substring(0, 200)}...
–í—ñ–¥: ${req.user.name} (ID: ${reporterId})
–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –∞–¥–º—ñ–Ω—Ü—ñ: ${reportAdminLink}`;

        await sendTelegramNotification(message, { disable_web_page_preview: false }); // –î–æ–∑–≤–æ–ª—è—î–º–æ –ø—Ä–µ–≤'—é –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    } catch (notificationError) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—É —Å–∫–∞—Ä–≥—É:".red, notificationError);
        // –ù–µ –ø–µ—Ä–µ—Ä–∏–≤–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    }

    console.log(`–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É —Å–∫–∞—Ä–≥—É ID: ${newReport._id} –Ω–∞ ${type} ${reportedItem} –≤—ñ–¥ ${reporterId}`.blue);
    res.status(201).json({
        status: 'success',
        message: '–í–∞—à—É —Å–∫–∞—Ä–≥—É —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ç–∞ –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.',
        data: { reportId: newReport._id }
    });
});

// --- GET ALL REPORTS (Admin/Moderator only) ---
exports.getAllReports = catchAsync(async (req, res, next) => {
    const filter = {};
    const allowedStatuses = ['new', 'in_progress', 'resolved', 'rejected'];
    const allowedTypes = ['story', 'comment', 'user'];

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    if (req.query.status && allowedStatuses.includes(req.query.status)) filter.status = req.query.status;
    if (req.query.type && allowedTypes.includes(req.query.type)) filter.type = req.query.type;
    if (req.query.reporterId && mongoose.Types.ObjectId.isValid(req.query.reporterId)) filter.reporter = req.query.reporterId;
    if (req.query.reportedItemId && mongoose.Types.ObjectId.isValid(req.query.reportedItemId)) filter.reportedItem = req.query.reportedItemId;

    const features = new APIFeatures(
        Report.find(filter)
            .populate({ path: 'reporter', select: 'name email avatarUrl' }) // –î–æ–¥–∞—î–º–æ –∞–≤–∞—Ç–∞—Ä —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞
            .populate({ path: 'resolvedBy', select: 'name' }), // –Ü–º'—è —Ç–æ–≥–æ, —Ö—Ç–æ –≤–∏—Ä—ñ—à–∏–≤
        req.query
    )
        // .filter() // –§—ñ–ª—å—Ç—Ä –≤–∂–µ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –≤–∏—â–µ
        .sort(req.query.sort || '-createdAt') // –ù–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É
        .paginate(20); // –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è

    const reports = await features.query.lean(); // .lean() –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    const totalDocuments = await Report.countDocuments(filter);

    // --- Populate reportedItem Details (–¥–∏–Ω–∞–º—ñ—á–Ω–æ) ---
    if (reports.length > 0) {
        const itemsToPopulate = { story: [], comment: [], user: [] };
        reports.forEach(report => {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î ID —ñ —á–∏ –≤—ñ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π
            if (report.reportedItem && mongoose.Types.ObjectId.isValid(report.reportedItem)) {
                if (report.type === 'story') itemsToPopulate.story.push(report.reportedItem);
                else if (report.type === 'comment') itemsToPopulate.comment.push(report.reportedItem);
                else if (report.type === 'user') itemsToPopulate.user.push(report.reportedItem);
            } else {
                report.reportedItemDetails = { _id: report.reportedItem, status: 'invalid_id' };
            }
        });

        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç–∏ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        const [storyDetails, commentDetails, userDetails] = await Promise.all([
            itemsToPopulate.story.length > 0 ? Story.find({ _id: { $in: itemsToPopulate.story } }).select('title slug status author').populate('author', 'name').lean() : Promise.resolve([]),
            itemsToPopulate.comment.length > 0 ? Comment.find({ _id: { $in: itemsToPopulate.comment } }).select('text status author story').populate('author', 'name').populate('story', 'title slug').lean() : Promise.resolve([]),
            itemsToPopulate.user.length > 0 ? User.find({ _id: { $in: itemsToPopulate.user } }).select('name email role isActive avatarUrl').lean() : Promise.resolve([]),
        ]);

        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
        const storyMap = storyDetails.reduce((map, item) => { map[item._id.toString()] = item; return map; }, {});
        const commentMap = commentDetails.reduce((map, item) => { map[item._id.toString()] = item; return map; }, {});
        const userMap = userDetails.reduce((map, item) => { map[item._id.toString()] = item; return map; }, {});

        // –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –¥–æ –∫–æ–∂–Ω–æ—ó —Å–∫–∞—Ä–≥–∏
        reports.forEach(report => {
            const itemIdStr = report.reportedItem?.toString();
            if (itemIdStr && !report.reportedItemDetails) { // –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞—î
                if (report.type === 'story' && storyMap[itemIdStr]) report.reportedItemDetails = storyMap[itemIdStr];
                else if (report.type === 'comment' && commentMap[itemIdStr]) report.reportedItemDetails = commentMap[itemIdStr];
                else if (report.type === 'user' && userMap[itemIdStr]) report.reportedItemDetails = userMap[itemIdStr];
                else report.reportedItemDetails = { _id: itemIdStr, status: 'deleted' }; // –Ø–∫—â–æ –æ–±'—î–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ
            }
        });
    }
    // --- –ö—ñ–Ω–µ—Ü—å Populate ---

    res.status(200).json({
        status: 'success',
        results: reports.length,
        data: reports,
        pagination: {
            currentPage: features.pagination.currentPage,
            limit: features.pagination.limit,
            totalPages: Math.ceil(totalDocuments / features.pagination.limit),
            totalResults: totalDocuments,
        }
    });
});


// --- GET ONE REPORT (Admin/Moderator only) ---
exports.getReport = catchAsync(async (req, res, next) => {
    const reportId = req.params.id;
    if (!mongoose.Types.ObjectId.isValid(reportId)) {
        return next(new AppError('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —Å–∫–∞—Ä–≥–∏.', 400));
    }

    const report = await Report.findById(reportId)
        .populate({ path: 'reporter', select: 'name email avatarUrl' })
        .populate({ path: 'resolvedBy', select: 'name' })
        .lean(); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ lean

    if (!report) {
        return next(new AppError('–°–∫–∞—Ä–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', 404));
    }

    // --- Populate reportedItem Details (–¥–∏–Ω–∞–º—ñ—á–Ω–æ) ---
    if (report.reportedItem) {
        let Model;
        let selectFields = '_id'; // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –Ω–∞–±—ñ—Ä –ø–æ–ª—ñ–≤
        let populatePaths = []; // –®–ª—è—Ö–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ populate

        if (report.type === 'story') {
            Model = Story;
            selectFields = 'title slug status author imageUrl createdAt';
            populatePaths.push({ path: 'author', select: 'name avatarUrl' });
        } else if (report.type === 'comment') {
            Model = Comment;
            selectFields = 'text status author story createdAt';
            populatePaths.push(
                { path: 'author', select: 'name avatarUrl' },
                { path: 'story', select: 'title slug' }
            );
        } else if (report.type === 'user') {
            Model = User;
            selectFields = 'name email role isActive avatarUrl createdAt';
        }

        if (Model && mongoose.Types.ObjectId.isValid(report.reportedItem)) {
            try {
                let query = Model.findById(report.reportedItem).select(selectFields);
                populatePaths.forEach(p => query = query.populate(p));
                const itemDetails = await query.lean();
                report.reportedItemDetails = itemDetails || { _id: report.reportedItem, status: 'deleted' }; // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –≤–∏–¥–∞–ª–µ–Ω–∏–π, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            } catch (populateError) {
                console.error(`–ü–æ–º–∏–ª–∫–∞ populate –¥–ª—è reportedItem ${report.reportedItem} (${report.type}):`, populateError);
                report.reportedItemDetails = { _id: report.reportedItem, status: 'error_loading' };
            }
        } else if (!mongoose.Types.ObjectId.isValid(report.reportedItem)) {
            report.reportedItemDetails = { _id: report.reportedItem, status: 'invalid_id' };
        }
    }
    // --- –ö—ñ–Ω–µ—Ü—å Populate ---

    res.status(200).json({ status: 'success', data: report });
});

// --- UPDATE REPORT STATUS (Admin/Moderator only) ---
exports.updateReportStatus = catchAsync(async (req, res, next) => {
    const reportId = req.params.id;
    const { status, adminNotes } = req.body; // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤ middleware

    if (!mongoose.Types.ObjectId.isValid(reportId)) {
        return next(new AppError('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —Å–∫–∞—Ä–≥–∏.', 400));
    }
    const allowedStatuses = ['new', 'in_progress', 'resolved', 'rejected'];
    if (!allowedStatuses.includes(status)) {
        return next(new AppError(`–ù–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º–∏–π —Å—Ç–∞—Ç—É—Å —Å–∫–∞—Ä–≥–∏: ${status}.`, 400));
    }

    const updateData = {
        status,
        resolvedBy: req.user._id, // –¢–æ–π, —Ö—Ç–æ –æ–Ω–æ–≤–∏–≤ —Å—Ç–∞—Ç—É—Å
        resolvedAt: Date.now()     // –ß–∞—Å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è/–∑–º—ñ–Ω–∏
    };
    // –î–æ–¥–∞—î–º–æ –Ω–æ—Ç–∞—Ç–∫–∏, —è–∫—â–æ –≤–æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ñ (—ñ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ –ø—ñ—Å–ª—è trim)
    if (adminNotes !== undefined && adminNotes !== null && String(adminNotes).trim()) {
        updateData.adminNotes = String(adminNotes).trim();
    } else if (adminNotes === '' || adminNotes === null) {
        // –î–æ–∑–≤–æ–ª—è—î–º–æ –æ—á–∏—Å—Ç–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫–∏
        updateData.adminNotes = null;
    }


    const report = await Report.findByIdAndUpdate(reportId, updateData, {
        new: true, // –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
        runValidators: true, // –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é (–Ω–∞–ø—Ä., –¥–æ–≤–∂–∏–Ω–∞ adminNotes)
    }).populate('reporter', 'name email telegramUserId preferredLang'); // Populate –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è

    if (!report) return next(new AppError('–°–∫–∞—Ä–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', 404));

    // --- –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, —â–æ –ø–æ–¥–∞–≤ —Å–∫–∞—Ä–≥—É ---
    if (report.reporter && ['resolved', 'rejected'].includes(report.status)) {
        try {
            const reporter = report.reporter;
            const reporterLang = reporter.preferredLang || 'uk';
            const reportIdShort = report._id.toString().slice(-6); // –ö–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è –ª–∏—Å—Ç–∞
            const statusTextMap = {
                resolved: '–≤–∏—Ä—ñ—à–µ–Ω–æ', // TODO: i18n
                rejected: '–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ' // TODO: i18n
            };
            const statusText = statusTextMap[report.status] || report.status;

            const subject = `–°—Ç–∞—Ç—É—Å –≤–∞—à–æ—ó —Å–∫–∞—Ä–≥–∏ #${reportIdShort} –æ–Ω–æ–≤–ª–µ–Ω–æ`; // TODO: i18n
            const baseMessage = `–®–∞–Ω–æ–≤–Ω–∏–π(–∞) ${reporter.name || '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}!\n\n–°—Ç–∞—Ç—É—Å –≤–∞—à–æ—ó —Å–∫–∞—Ä–≥–∏ #${reportIdShort} –Ω–∞ –æ–±'—î–∫—Ç —Ç–∏–ø—É "${report.type}" (ID: ${report.reportedItem}) –±—É–ª–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "${statusText}".`;
            const adminNoteMessage = report.adminNotes ? `\n\n–ü—Ä–∏–º—ñ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n${report.adminNotes}\n` : '\n';
            const closingMessage = `\n–î—è–∫—É—î–º–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥—É —É –ø—ñ–¥—Ç—Ä–∏–º—Ü—ñ –±–µ–∑–ø–µ–∫–∏ –Ω–∞—à–æ–≥–æ —Ä–µ—Å—É—Ä—Å—É.\n\n–ó –ø–æ–≤–∞–≥–æ—é,\n–ö–æ–º–∞–Ω–¥–∞ EroStory`; // TODO: i18n

            const emailMessage = baseMessage + adminNoteMessage + closingMessage;
            // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram (–∑ HTML)
            const telegramMessage = `‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–∞—à–æ—ó —Å–∫–∞—Ä–≥–∏ <code>#${reportIdShort}</code> –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "<b>${statusText}</b>".${report.adminNotes ? `\n\n<i>–ü—Ä–∏–º—ñ—Ç–∫–∞:</i> ${report.adminNotes}` : ''}`;

            // –ù–∞–¥—Å–∏–ª–∞—î–º–æ Email
            if (reporter.email) {
                const plainTextMessage = emailMessage.replace(/<[^>]*>?/gm, '');
                sendEmail({ email: reporter.email, subject, message: plainTextMessage, html: emailMessage })
                    .catch(e => console.error(`Email notification error (report ${report._id}):`, e));
            }
            // –ù–∞–¥—Å–∏–ª–∞—î–º–æ Telegram
            if(reporter.telegramUserId) {
                sendTelegramNotification(telegramMessage, { parse_mode: 'HTML' }, reporter.telegramUserId)
                    .catch(e => console.error(`Telegram notification error (user ${reporter.telegramUserId}):`, e));
            }
        } catch (notificationError) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ —Å–∫–∞—Ä–≥—É ${reportId}:`, notificationError);
        }
    }
    // --- –ö—ñ–Ω–µ—Ü—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ---

    console.log(`–°—Ç–∞—Ç—É—Å —Å–∫–∞—Ä–≥–∏ ${report._id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ "${status}" –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${req.user.name}`.cyan);
    res.status(200).json({ status: 'success', data: report });
});
// --- END OF FILE controllers/reportController.js ---